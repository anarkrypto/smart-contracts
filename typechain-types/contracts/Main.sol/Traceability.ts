/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace Batches {
  export type BatchStruct = {
    supplierId: BigNumberish;
    productId: BigNumberish;
    materialBatchIds: BigNumberish[];
    metadataURI: string;
    txs: BytesLike[];
    previousTx: BytesLike;
  };

  export type BatchStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber[],
    string,
    string[],
    string
  ] & {
    supplierId: BigNumber;
    productId: BigNumber;
    materialBatchIds: BigNumber[];
    metadataURI: string;
    txs: string[];
    previousTx: string;
  };
}

export declare namespace Products {
  export type ProductStruct = {
    supplierId: BigNumberish;
    holderAddr: string;
    holderIsContract: boolean;
    metadataURI: string;
  };

  export type ProductStructOutput = [BigNumber, string, boolean, string] & {
    supplierId: BigNumber;
    holderAddr: string;
    holderIsContract: boolean;
    metadataURI: string;
  };
}

export declare namespace Suppliers {
  export type SupplierStruct = {
    metadataURI: string;
    managersAddrs: string[];
    role: BigNumberish;
    exists: boolean;
  };

  export type SupplierStructOutput = [string, string[], number, boolean] & {
    metadataURI: string;
    managersAddrs: string[];
    role: number;
    exists: boolean;
  };
}

export interface TraceabilityInterface extends utils.Interface {
  functions: {
    "_doSafeHolderFullCheck(address)": FunctionFragment;
    "_owner()": FunctionFragment;
    "addAdmin(address)": FunctionFragment;
    "addBatch(uint256,uint256[],string)": FunctionFragment;
    "addOperator(uint256,address)": FunctionFragment;
    "addProduct(uint256,address,string)": FunctionFragment;
    "addSupplier(string,address[],uint8)": FunctionFragment;
    "addTx(uint256,string,uint256,bytes32)": FunctionFragment;
    "addTxAndTransfer(uint256,string,address,uint256,bytes32)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "getBatch(uint256)": FunctionFragment;
    "getManagers(uint256)": FunctionFragment;
    "getNumberOfBatches()": FunctionFragment;
    "getNumberOfTxs()": FunctionFragment;
    "getProduct(uint256)": FunctionFragment;
    "getProductHolder(uint256)": FunctionFragment;
    "getSupplier(uint256)": FunctionFragment;
    "getSupplierIdFromProduct(uint256)": FunctionFragment;
    "getSupplierProducts(uint256)": FunctionFragment;
    "getTx(bytes32)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "removeAdmin(address)": FunctionFragment;
    "removeOperator(uint256,address)": FunctionFragment;
    "removeSupplier(uint256)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokenSupply(uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferBatch(uint256,address)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_doSafeHolderFullCheck"
      | "_owner"
      | "addAdmin"
      | "addBatch"
      | "addOperator"
      | "addProduct"
      | "addSupplier"
      | "addTx"
      | "addTxAndTransfer"
      | "balanceOf"
      | "balanceOfBatch"
      | "getBatch"
      | "getManagers"
      | "getNumberOfBatches"
      | "getNumberOfTxs"
      | "getProduct"
      | "getProductHolder"
      | "getSupplier"
      | "getSupplierIdFromProduct"
      | "getSupplierProducts"
      | "getTx"
      | "isApprovedForAll"
      | "removeAdmin"
      | "removeOperator"
      | "removeSupplier"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "supportsInterface"
      | "tokenSupply"
      | "tokenURI"
      | "transferBatch"
      | "uri"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_doSafeHolderFullCheck",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "_owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "addAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addBatch",
    values: [BigNumberish, BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "addOperator",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addProduct",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSupplier",
    values: [string, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addTx",
    values: [BigNumberish, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addTxAndTransfer",
    values: [BigNumberish, string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getManagers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfBatches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfTxs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductHolder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupplierIdFromProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupplierProducts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getTx", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "removeAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeOperator",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSupplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferBatch",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "_doSafeHolderFullCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addSupplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addTx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTxAndTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfTxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProductHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupplierIdFromProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupplierProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSupplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "NewBatch(uint256,uint256,uint256,uint256[],string)": EventFragment;
    "NewManager(uint256,address)": EventFragment;
    "NewOperator(uint256,address,address)": EventFragment;
    "NewProduct(uint256,uint256,address,bool,string,address)": EventFragment;
    "NewSupplier(uint256)": EventFragment;
    "NewTx(bytes32)": EventFragment;
    "RemovedManager(uint256,address)": EventFragment;
    "RemovedOperator(uint256,address,address)": EventFragment;
    "RemovedSupplier(uint256)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewProduct"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSupplier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTx"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedSupplier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export interface ApprovalForAllEventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface NewBatchEventObject {
  tokenId: BigNumber;
  supplierId: BigNumber;
  productId: BigNumber;
  materialIds: BigNumber[];
  metadataURI: string;
}
export type NewBatchEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber[], string],
  NewBatchEventObject
>;

export type NewBatchEventFilter = TypedEventFilter<NewBatchEvent>;

export interface NewManagerEventObject {
  supplierId: BigNumber;
  managerAddr: string;
}
export type NewManagerEvent = TypedEvent<
  [BigNumber, string],
  NewManagerEventObject
>;

export type NewManagerEventFilter = TypedEventFilter<NewManagerEvent>;

export interface NewOperatorEventObject {
  productId: BigNumber;
  operator: string;
  manager: string;
}
export type NewOperatorEvent = TypedEvent<
  [BigNumber, string, string],
  NewOperatorEventObject
>;

export type NewOperatorEventFilter = TypedEventFilter<NewOperatorEvent>;

export interface NewProductEventObject {
  productId: BigNumber;
  supplierId: BigNumber;
  holderAddr: string;
  holderIsContract: boolean;
  metadataURI: string;
  manager: string;
}
export type NewProductEvent = TypedEvent<
  [BigNumber, BigNumber, string, boolean, string, string],
  NewProductEventObject
>;

export type NewProductEventFilter = TypedEventFilter<NewProductEvent>;

export interface NewSupplierEventObject {
  id: BigNumber;
}
export type NewSupplierEvent = TypedEvent<[BigNumber], NewSupplierEventObject>;

export type NewSupplierEventFilter = TypedEventFilter<NewSupplierEvent>;

export interface NewTxEventObject {
  txId: string;
}
export type NewTxEvent = TypedEvent<[string], NewTxEventObject>;

export type NewTxEventFilter = TypedEventFilter<NewTxEvent>;

export interface RemovedManagerEventObject {
  supplierId: BigNumber;
  managerAddr: string;
}
export type RemovedManagerEvent = TypedEvent<
  [BigNumber, string],
  RemovedManagerEventObject
>;

export type RemovedManagerEventFilter = TypedEventFilter<RemovedManagerEvent>;

export interface RemovedOperatorEventObject {
  productId: BigNumber;
  operator: string;
  manager: string;
}
export type RemovedOperatorEvent = TypedEvent<
  [BigNumber, string, string],
  RemovedOperatorEventObject
>;

export type RemovedOperatorEventFilter = TypedEventFilter<RemovedOperatorEvent>;

export interface RemovedSupplierEventObject {
  id: BigNumber;
}
export type RemovedSupplierEvent = TypedEvent<
  [BigNumber],
  RemovedSupplierEventObject
>;

export type RemovedSupplierEventFilter = TypedEventFilter<RemovedSupplierEvent>;

export interface TransferBatchEventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  TransferBatchEventObject
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export interface TransferSingleEventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TransferSingleEventObject
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface URIEventObject {
  value: string;
  id: BigNumber;
}
export type URIEvent = TypedEvent<[string, BigNumber], URIEventObject>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface Traceability extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TraceabilityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _doSafeHolderFullCheck(
      account: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    _owner(overrides?: CallOverrides): Promise<[string]>;

    addAdmin(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addBatch(
      productId: BigNumberish,
      materialBatchIds: BigNumberish[],
      metadataURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addOperator(
      productId: BigNumberish,
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addProduct(
      supplierId: BigNumberish,
      holderAddr: string,
      metadataURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSupplier(
      metadataURI: string,
      managersAddrs: string[],
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTx(
      batchId: BigNumberish,
      receiver: string,
      timestamp: BigNumberish,
      previousTx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTxAndTransfer(
      batchId: BigNumberish,
      receiver: string,
      receiverAddress: string,
      timestamp: BigNumberish,
      previousTx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getBatch(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Batches.BatchStructOutput]>;

    getManagers(
      supplierId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { _managers: string[] }>;

    getNumberOfBatches(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfBatches: BigNumber }>;

    getNumberOfTxs(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfTxs: BigNumber }>;

    getProduct(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Products.ProductStructOutput]>;

    getProductHolder(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSupplier(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Suppliers.SupplierStructOutput]>;

    getSupplierIdFromProduct(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSupplierProducts(
      supplierId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTx(
      txId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string] & {
        batchId: BigNumber;
        sender: string;
        receiver: string;
        previousTx: string;
      }
    >;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeAdmin(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeOperator(
      productId: BigNumberish,
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSupplier(
      supplierId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    transferBatch(
      id: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uri(id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  _doSafeHolderFullCheck(
    account: string,
    overrides?: CallOverrides
  ): Promise<void>;

  _owner(overrides?: CallOverrides): Promise<string>;

  addAdmin(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addBatch(
    productId: BigNumberish,
    materialBatchIds: BigNumberish[],
    metadataURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addOperator(
    productId: BigNumberish,
    operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addProduct(
    supplierId: BigNumberish,
    holderAddr: string,
    metadataURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSupplier(
    metadataURI: string,
    managersAddrs: string[],
    role: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTx(
    batchId: BigNumberish,
    receiver: string,
    timestamp: BigNumberish,
    previousTx: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTxAndTransfer(
    batchId: BigNumberish,
    receiver: string,
    receiverAddress: string,
    timestamp: BigNumberish,
    previousTx: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getBatch(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Batches.BatchStructOutput>;

  getManagers(
    supplierId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getNumberOfBatches(overrides?: CallOverrides): Promise<BigNumber>;

  getNumberOfTxs(overrides?: CallOverrides): Promise<BigNumber>;

  getProduct(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Products.ProductStructOutput>;

  getProductHolder(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getSupplier(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Suppliers.SupplierStructOutput>;

  getSupplierIdFromProduct(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSupplierProducts(
    supplierId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTx(
    txId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string] & {
      batchId: BigNumber;
      sender: string;
      receiver: string;
      previousTx: string;
    }
  >;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeAdmin(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeOperator(
    productId: BigNumberish,
    operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSupplier(
    supplierId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenSupply(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  tokenURI(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferBatch(
    id: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uri(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _doSafeHolderFullCheck(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    _owner(overrides?: CallOverrides): Promise<string>;

    addAdmin(addr: string, overrides?: CallOverrides): Promise<void>;

    addBatch(
      productId: BigNumberish,
      materialBatchIds: BigNumberish[],
      metadataURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addOperator(
      productId: BigNumberish,
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addProduct(
      supplierId: BigNumberish,
      holderAddr: string,
      metadataURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addSupplier(
      metadataURI: string,
      managersAddrs: string[],
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addTx(
      batchId: BigNumberish,
      receiver: string,
      timestamp: BigNumberish,
      previousTx: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addTxAndTransfer(
      batchId: BigNumberish,
      receiver: string,
      receiverAddress: string,
      timestamp: BigNumberish,
      previousTx: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getBatch(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Batches.BatchStructOutput>;

    getManagers(
      supplierId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getNumberOfBatches(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfTxs(overrides?: CallOverrides): Promise<BigNumber>;

    getProduct(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Products.ProductStructOutput>;

    getProductHolder(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getSupplier(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Suppliers.SupplierStructOutput>;

    getSupplierIdFromProduct(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupplierProducts(
      supplierId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTx(
      txId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string] & {
        batchId: BigNumber;
        sender: string;
        receiver: string;
        previousTx: string;
      }
    >;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeAdmin(addr: string, overrides?: CallOverrides): Promise<void>;

    removeOperator(
      productId: BigNumberish,
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSupplier(
      supplierId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferBatch(
      id: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(id: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "NewBatch(uint256,uint256,uint256,uint256[],string)"(
      tokenId?: null,
      supplierId?: null,
      productId?: null,
      materialIds?: null,
      metadataURI?: null
    ): NewBatchEventFilter;
    NewBatch(
      tokenId?: null,
      supplierId?: null,
      productId?: null,
      materialIds?: null,
      metadataURI?: null
    ): NewBatchEventFilter;

    "NewManager(uint256,address)"(
      supplierId?: null,
      managerAddr?: null
    ): NewManagerEventFilter;
    NewManager(supplierId?: null, managerAddr?: null): NewManagerEventFilter;

    "NewOperator(uint256,address,address)"(
      productId?: null,
      operator?: null,
      manager?: null
    ): NewOperatorEventFilter;
    NewOperator(
      productId?: null,
      operator?: null,
      manager?: null
    ): NewOperatorEventFilter;

    "NewProduct(uint256,uint256,address,bool,string,address)"(
      productId?: null,
      supplierId?: null,
      holderAddr?: null,
      holderIsContract?: null,
      metadataURI?: null,
      manager?: null
    ): NewProductEventFilter;
    NewProduct(
      productId?: null,
      supplierId?: null,
      holderAddr?: null,
      holderIsContract?: null,
      metadataURI?: null,
      manager?: null
    ): NewProductEventFilter;

    "NewSupplier(uint256)"(id?: null): NewSupplierEventFilter;
    NewSupplier(id?: null): NewSupplierEventFilter;

    "NewTx(bytes32)"(txId?: null): NewTxEventFilter;
    NewTx(txId?: null): NewTxEventFilter;

    "RemovedManager(uint256,address)"(
      supplierId?: null,
      managerAddr?: null
    ): RemovedManagerEventFilter;
    RemovedManager(
      supplierId?: null,
      managerAddr?: null
    ): RemovedManagerEventFilter;

    "RemovedOperator(uint256,address,address)"(
      productId?: null,
      operator?: null,
      manager?: null
    ): RemovedOperatorEventFilter;
    RemovedOperator(
      productId?: null,
      operator?: null,
      manager?: null
    ): RemovedOperatorEventFilter;

    "RemovedSupplier(uint256)"(id?: null): RemovedSupplierEventFilter;
    RemovedSupplier(id?: null): RemovedSupplierEventFilter;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;

    "URI(string,uint256)"(
      value?: null,
      id?: BigNumberish | null
    ): URIEventFilter;
    URI(value?: null, id?: BigNumberish | null): URIEventFilter;
  };

  estimateGas: {
    _doSafeHolderFullCheck(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _owner(overrides?: CallOverrides): Promise<BigNumber>;

    addAdmin(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addBatch(
      productId: BigNumberish,
      materialBatchIds: BigNumberish[],
      metadataURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addOperator(
      productId: BigNumberish,
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addProduct(
      supplierId: BigNumberish,
      holderAddr: string,
      metadataURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSupplier(
      metadataURI: string,
      managersAddrs: string[],
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTx(
      batchId: BigNumberish,
      receiver: string,
      timestamp: BigNumberish,
      previousTx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTxAndTransfer(
      batchId: BigNumberish,
      receiver: string,
      receiverAddress: string,
      timestamp: BigNumberish,
      previousTx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBatch(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getManagers(
      supplierId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfBatches(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfTxs(overrides?: CallOverrides): Promise<BigNumber>;

    getProduct(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getProductHolder(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupplier(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupplierIdFromProduct(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupplierProducts(
      supplierId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTx(txId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeAdmin(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeOperator(
      productId: BigNumberish,
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSupplier(
      supplierId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferBatch(
      id: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uri(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _doSafeHolderFullCheck(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAdmin(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addBatch(
      productId: BigNumberish,
      materialBatchIds: BigNumberish[],
      metadataURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addOperator(
      productId: BigNumberish,
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addProduct(
      supplierId: BigNumberish,
      holderAddr: string,
      metadataURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSupplier(
      metadataURI: string,
      managersAddrs: string[],
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTx(
      batchId: BigNumberish,
      receiver: string,
      timestamp: BigNumberish,
      previousTx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTxAndTransfer(
      batchId: BigNumberish,
      receiver: string,
      receiverAddress: string,
      timestamp: BigNumberish,
      previousTx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBatch(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getManagers(
      supplierId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfBatches(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfTxs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProduct(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProductHolder(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupplier(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupplierIdFromProduct(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupplierProducts(
      supplierId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTx(
      txId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAdmin(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeOperator(
      productId: BigNumberish,
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSupplier(
      supplierId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferBatch(
      id: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
