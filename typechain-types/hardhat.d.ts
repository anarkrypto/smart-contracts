/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155__factory>;
    getContractFactory(
      name: "IERC1155MetadataURI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155MetadataURI__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC1155Holder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Holder__factory>;
    getContractFactory(
      name: "ERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Admin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Admin__factory>;
    getContractFactory(
      name: "Batches",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Batches__factory>;
    getContractFactory(
      name: "Traceability",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Traceability__factory>;
    getContractFactory(
      name: "Products",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Products__factory>;
    getContractFactory(
      name: "Suppliers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Suppliers__factory>;
    getContractFactory(
      name: "NFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFT__factory>;
    getContractFactory(
      name: "BatchesHolder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BatchesHolder__factory>;
    getContractFactory(
      name: "IBatchesHolder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBatchesHolder__factory>;
    getContractFactory(
      name: "BatchesOperator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BatchesOperator__factory>;
    getContractFactory(
      name: "IBatchesOperator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBatchesOperator__factory>;

    getContractAt(
      name: "ERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155>;
    getContractAt(
      name: "IERC1155MetadataURI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155MetadataURI>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC1155Holder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Holder>;
    getContractAt(
      name: "ERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Admin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Admin>;
    getContractAt(
      name: "Batches",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Batches>;
    getContractAt(
      name: "Traceability",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Traceability>;
    getContractAt(
      name: "Products",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Products>;
    getContractAt(
      name: "Suppliers",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Suppliers>;
    getContractAt(
      name: "NFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFT>;
    getContractAt(
      name: "BatchesHolder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BatchesHolder>;
    getContractAt(
      name: "IBatchesHolder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBatchesHolder>;
    getContractAt(
      name: "BatchesOperator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BatchesOperator>;
    getContractAt(
      name: "IBatchesOperator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBatchesOperator>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
